import path from 'path';
import fs from 'fs';
import { LabPatrol } from './day-6';

let patrol: LabPatrol;

beforeEach(() => {
  const filePath = path.resolve(__dirname, 'test-input.txt');
  const data = fs.readFileSync(filePath, 'utf-8');

  patrol = new LabPatrol(data);
});

describe('day-6', () => {
  describe('Getting guard position', () => {
    test('should get coordinate {col: 4, row: 6} for the guard position', () => {
      const layout = `....#.....
      .........#
      ..........
      ..#.......
      .......#..
      ..........
      .#..^.....
      ........#.
      #.........
      ......#...`
        .split('\n')
        .map((line) => line.trim().split(''));
      expect(patrol.getPosition(layout)).toEqual({ col: 4, row: 6 });
    });
    test('should get coordinate {col: 9, row: 3} for the guard position', () => {
      const layout = `....#.....
      .........#
      ..........
      ..#......^
      .......#..
      ..........
      .#........
      ........#.
      #.........
      ......#...`
        .split('\n')
        .map((line) => line.trim().split(''));
      expect(patrol.getPosition(layout)).toEqual({ col: 9, row: 3 });
    });
    test('should get null coordinate for no guard in the area', () => {
      const layout = `....#.....
      .........#
      ..........
      ..#.......
      .......#..
      ..........
      .#........
      ........#.
      #.........
      ......#...`
        .split('\n')
        .map((line) => line.trim().split(''));
      expect(patrol.getPosition(layout)).toBe(null);
    });
  });
  describe('Checking for obstructions', () => {
    test('should return false when there is no obstruction ahead', () => {
      const layout = `....#.....
  .........#
  ..........
  ..#.......
  .......#..
  ..........d
  .#..^.....
  ........#.
  #.........
  ......#...`
        .split('\n')
        .map((line) => line.trim().split(''));
      expect(patrol.checkObstructionAhead(layout)).toBe(false);
    });
    test('should return true where there is an obstruction ahead', () => {
      const layout = `....#.....
  ....^....#
  ..........
  ..#.......
  .......#..
  ..........
  .#........
  ........#.
  #.........
  ......#...`
        .split('\n')
        .map((line) => line.trim().split(''));
      expect(patrol.checkObstructionAhead(layout)).toBe(true);
    });
    test('should return false if the guard is no longer in the area', () => {
      const layout = `....#.....
  .........#
  ..........
  ..#.......
  .......#..
  ..........
  .#........
  ........#.
  #.........
  ......#...`
        .split('\n')
        .map((line) => line.trim().split(''));
      expect(patrol.checkObstructionAhead(layout)).toBe(false);
    });
  });

  describe('Taking steps', () => {
    test('should take a step if there are no obstacles ahead', () => {
      const layout = `....#.....
      .........#
      ..........
      ..#.......
      .......#..
      ..........
      .#..^.....
      ........#.
      #.........
      ......#...`
        .split('\n')
        .map((line) => line.trim().split(''));
      const newPositionLayout = `....#.....
      .........#
      ..........
      ..#.......
      .......#..
      ....^.....
      .#........
      ........#.
      #.........
      ......#...`
        .split('\n')
        .map((line) => line.trim().split(''));
      expect(patrol.stepForward(layout)).toStrictEqual(newPositionLayout);
    });
    test('should NOT take a step if there is an obstacle ahead', () => {
      const layout = `....#.....
      ....^....#
      ..........
      ..#.......
      .......#..
      ..........
      .#........
      ........#.
      #.........
      ......#...`
        .split('\n')
        .map((line) => line.trim().split(''));
      expect(patrol.stepForward(layout)).toStrictEqual(layout);
    });
    test('should leave area when guard gets to the edge', () => {
      const layout = `...^#.....
      .........#
      ..........
      ..#.......
      .......#..
      ..........
      .#........
      ........#.
      #.........
      ......#...`
        .split('\n')
        .map((line) => line.trim().split(''));
      const newLayout = `....#.....
        .........#
        ..........
        ..#.......
        .......#..
        ..........
        .#........
        ........#.
        #.........
        ......#...`
        .split('\n')
        .map((line) => line.trim().split(''));
      expect(patrol.stepForward(layout)).toStrictEqual(newLayout);
    });
  });

  describe('Avoiding obstructions', () => {
    test('should turn right 90 degress at the obstruction', () => {
      const layout = `....#.....
      ....^....#
      ..........
      ..#.......
      .......#..
      ..........
      .#........
      ........#.
      #.........
      ......#...`
        .split('\n')
        .map((line) => line.trim().split(''));

      const newLayout = `.#........
      .......#..
      ....#.....
      .........#
      ..........
      #^........
      ..........
      ...#......
      ......#...
      ........#.`
        .split('\n')
        .map((line) => line.trim().split(''));

      expect(patrol.avoidObstacle(layout)).toStrictEqual(newLayout);
    });
  });

  describe('Counting patrol steps', () => {
    test('should get the sum of unique steps', () => {
      expect(patrol.getSumOfSteps()).toBe(41);
    });
  });
});
